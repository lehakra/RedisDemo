@page "/fetchdata"

@using BlazorApp.Data
@using BlazorApp.Extensions
@inject WeatherForecastService ForecastService
@inject IDistributedCache cache

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p><em>@loadStatus</em></p>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    private string loadStatus = string.Empty;

    // this happends on page load
    protected override async Task OnInitializedAsync()
    {
        forecasts = null;
        loadStatus = string.Empty;

        string recordKey = "WeatherForecast";
        try
        {
            forecasts = await cache.GetRecordAsync<WeatherForecast[]>(recordKey);

            if (forecasts == null)
            {
                forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
                loadStatus = $"Loaded from API call";
                await cache.SetRecordAsync<WeatherForecast[]>(recordKey, forecasts);
            }
            else
            {
                loadStatus = $"Loaded from cache";
            }
        }
        catch (Exception e)
        {
            throw;
        }
    }
}